// Mocks generated by Mockito 5.4.6 from annotations
// in data/test/src/repo_impl/movie_repository_impl_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;

import 'package:data/src/data_source/movie_api_datasource.dart' as _i2;
import 'package:data/src/data_source/movie_database_datasource.dart' as _i9;
import 'package:data/src/model/movie_details_data.dart' as _i8;
import 'package:data/src/model/movie_page_data.dart' as _i6;
import 'package:data/src/model/movie_with_favourite_data.dart' as _i10;
import 'package:domain/domain.dart' as _i5;
import 'package:either_dart/either.dart' as _i4;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i7;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [MovieApiDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockMovieApiDataSource extends _i1.Mock
    implements _i2.MovieApiDataSource {
  @override
  _i3.Future<_i4.Either<_i5.MoviesError, _i6.PageData>> fetchPage({
    required String? searchText,
    required int? cursor,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#fetchPage, [], {
              #searchText: searchText,
              #cursor: cursor,
            }),
            returnValue:
                _i3.Future<_i4.Either<_i5.MoviesError, _i6.PageData>>.value(
                  _i7.dummyValue<_i4.Either<_i5.MoviesError, _i6.PageData>>(
                    this,
                    Invocation.method(#fetchPage, [], {
                      #searchText: searchText,
                      #cursor: cursor,
                    }),
                  ),
                ),
            returnValueForMissingStub:
                _i3.Future<_i4.Either<_i5.MoviesError, _i6.PageData>>.value(
                  _i7.dummyValue<_i4.Either<_i5.MoviesError, _i6.PageData>>(
                    this,
                    Invocation.method(#fetchPage, [], {
                      #searchText: searchText,
                      #cursor: cursor,
                    }),
                  ),
                ),
          )
          as _i3.Future<_i4.Either<_i5.MoviesError, _i6.PageData>>);

  @override
  _i3.Future<_i4.Either<_i5.MovieDetailsError, _i8.MovieDetailsData>>
  fetchMovieDetails({required int? id}) =>
      (super.noSuchMethod(
            Invocation.method(#fetchMovieDetails, [], {#id: id}),
            returnValue: _i3.Future<
              _i4.Either<_i5.MovieDetailsError, _i8.MovieDetailsData>
            >.value(
              _i7.dummyValue<
                _i4.Either<_i5.MovieDetailsError, _i8.MovieDetailsData>
              >(this, Invocation.method(#fetchMovieDetails, [], {#id: id})),
            ),
            returnValueForMissingStub: _i3.Future<
              _i4.Either<_i5.MovieDetailsError, _i8.MovieDetailsData>
            >.value(
              _i7.dummyValue<
                _i4.Either<_i5.MovieDetailsError, _i8.MovieDetailsData>
              >(this, Invocation.method(#fetchMovieDetails, [], {#id: id})),
            ),
          )
          as _i3.Future<
            _i4.Either<_i5.MovieDetailsError, _i8.MovieDetailsData>
          >);
}

/// A class which mocks [MovieDatabaseDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockMovieDatabaseDataSource extends _i1.Mock
    implements _i9.MovieDatabaseDataSource {
  @override
  _i3.Future<void> cacheMovies({required _i6.PageData? page}) =>
      (super.noSuchMethod(
            Invocation.method(#cacheMovies, [], {#page: page}),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);

  @override
  _i3.Future<void> clearMoviesCache() =>
      (super.noSuchMethod(
            Invocation.method(#clearMoviesCache, []),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);

  @override
  _i3.Future<List<_i10.MovieWithFavouriteData>> getMovies() =>
      (super.noSuchMethod(
            Invocation.method(#getMovies, []),
            returnValue: _i3.Future<List<_i10.MovieWithFavouriteData>>.value(
              <_i10.MovieWithFavouriteData>[],
            ),
            returnValueForMissingStub:
                _i3.Future<List<_i10.MovieWithFavouriteData>>.value(
                  <_i10.MovieWithFavouriteData>[],
                ),
          )
          as _i3.Future<List<_i10.MovieWithFavouriteData>>);

  @override
  _i3.Stream<List<_i10.MovieWithFavouriteData>> observeMovies() =>
      (super.noSuchMethod(
            Invocation.method(#observeMovies, []),
            returnValue: _i3.Stream<List<_i10.MovieWithFavouriteData>>.empty(),
            returnValueForMissingStub:
                _i3.Stream<List<_i10.MovieWithFavouriteData>>.empty(),
          )
          as _i3.Stream<List<_i10.MovieWithFavouriteData>>);

  @override
  _i3.Stream<List<_i10.MovieWithFavouriteData>> observeFavouriteMovies() =>
      (super.noSuchMethod(
            Invocation.method(#observeFavouriteMovies, []),
            returnValue: _i3.Stream<List<_i10.MovieWithFavouriteData>>.empty(),
            returnValueForMissingStub:
                _i3.Stream<List<_i10.MovieWithFavouriteData>>.empty(),
          )
          as _i3.Stream<List<_i10.MovieWithFavouriteData>>);

  @override
  _i3.Future<_i4.Either<_i5.FavouriteStatusError, bool>>
  changeMovieFavouriteStatus({required int? id}) =>
      (super.noSuchMethod(
            Invocation.method(#changeMovieFavouriteStatus, [], {#id: id}),
            returnValue:
                _i3.Future<_i4.Either<_i5.FavouriteStatusError, bool>>.value(
                  _i7.dummyValue<_i4.Either<_i5.FavouriteStatusError, bool>>(
                    this,
                    Invocation.method(#changeMovieFavouriteStatus, [], {
                      #id: id,
                    }),
                  ),
                ),
            returnValueForMissingStub:
                _i3.Future<_i4.Either<_i5.FavouriteStatusError, bool>>.value(
                  _i7.dummyValue<_i4.Either<_i5.FavouriteStatusError, bool>>(
                    this,
                    Invocation.method(#changeMovieFavouriteStatus, [], {
                      #id: id,
                    }),
                  ),
                ),
          )
          as _i3.Future<_i4.Either<_i5.FavouriteStatusError, bool>>);

  @override
  _i3.Stream<bool> observeMovieFavouriteStatus({required int? id}) =>
      (super.noSuchMethod(
            Invocation.method(#observeMovieFavouriteStatus, [], {#id: id}),
            returnValue: _i3.Stream<bool>.empty(),
            returnValueForMissingStub: _i3.Stream<bool>.empty(),
          )
          as _i3.Stream<bool>);
}
